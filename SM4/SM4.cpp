#include<iostream>
using namespace std;
#include<time.h>
int S[16][16] =
{
	{0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05},
	{0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99},
	{0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62},
	{0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6},
	{0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8},
	{0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35},
	{0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87},
	{0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e},
	{0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1},
	{0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3},
	{0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f},
	{0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51},
	{0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,0x11,0xd9,0x5c,0x41,0x1f,0x10,0x5a,0xd8},
	{0x0a,0xc1,0x31,0x88,0xa5,0xcd,0x7b,0xbd,0x2d,0x74,0xd0,0x12,0xb8,0xe5,0xb4,0xb0},
	{0x89,0x69,0x97,0x4a,0x0c,0x96,0x77,0x7e,0x65,0xb9,0xf1,0x09,0xc5,0x6e,0xc6,0x84},
	{0x18,0xf0,0x7d,0xec,0x3a,0xdc,0x4d,0x20,0x79,0xee,0x5f,0x3e,0xd7,0xcb,0x39,0x48}
};
int FK[4][8] =
{
	{0xa,0x3,0xb,0x1,0xb,0xa,0xc,0x6},
	{0x5,0x6,0xa,0xa,0x3,0x3,0x5,0x0},
	{0x6,0x7,0x7,0xd,0x9,0x1,0x9,0x7},
	{0xb,0x2,0x7,0x0,0x2,0x2,0xd,0xc}
};
int CK[32][8] =
{
	{0x0,0x0,0x0,0x7,0x0,0xe,0x1,0x5},
	{0x1,0xc,0x2,0x3,0x2,0xa,0x3,0x1},
	{0x3,0x8,0x3,0xf,0x4,0x6,0x4,0xd},
	{0x5,0x4,0x5,0xb,0x6,0x2,0x6,0x9},
	{0x7,0x0,0x7,0x7,0x7,0xe,0x8,0x5},
	{0x8,0xc,0x9,0x3,0x9,0xa,0xa,0x1},
	{0xa,0x8,0xa,0xf,0xb,0x6,0xb,0xd},
	{0xc,0x4,0xc,0xb,0xd,0x2,0xd,0x9},
	{0xe,0x0,0xe,0x7,0xe,0xe,0xf,0x5},
	{0xf,0xc,0x0,0x3,0x0,0xa,0x1,0x1},
	{0x1,0x8,0x1,0xf,0x2,0x6,0x2,0xd},
	{0x3,0x4,0x3,0xb,0x4,0x2,0x4,0x9},
	{0x5,0x0,0x5,0x7,0x5,0xe,0x6,0x5},
	{0x6,0xc,0x7,0x3,0x7,0xa,0x8,0x1},
	{0x8,0x8,0x8,0xf,0x9,0x6,0x9,0xd},
	{0xa,0x4,0xa,0xb,0xb,0x2,0xb,0x9},
	{0xc,0x0,0xc,0x7,0xc,0xe,0xd,0x5},
	{0xd,0xc,0xe,0x3,0xe,0xa,0xf,0x1},
	{0xf,0x8,0xf,0xf,0x0,0x6,0x0,0xd},
	{0x1,0x4,0x1,0xb,0x2,0x2,0x2,0x9},
	{0x3,0x0,0x3,0x7,0x3,0xe,0x4,0x5},
	{0x4,0xc,0x5,0x3,0x5,0xa,0x6,0x1},
	{0x6,0x8,0x6,0xf,0x7,0x6,0x7,0xd},
	{0x8,0x4,0x8,0xb,0x9,0x2,0x9,0x9},
	{0xa,0x0,0xa,0x7,0xa,0xe,0xb,0x5},
	{0xb,0xc,0xc,0x3,0xc,0xa,0xd,0x1},
	{0xd,0x8,0xd,0xf,0xe,0x6,0xe,0xd},
	{0xf,0x4,0xf,0xb,0x0,0x2,0x0,0x9},
	{0x1,0x0,0x1,0x7,0x1,0xe,0x2,0x5},
	{0x2,0xc,0x3,0x3,0x3,0xa,0x4,0x1},
	{0x4,0x8,0x4,0xf,0x5,0x6,0x5,0xd},
	{0x6,0x4,0x6,0xb,0x7,0x2,0x7,0x9}

};
int main()
{
	unsigned int plaintext[32] = { 0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,0xb,0xc,0xd,0xe,0xf,0xf,0xe,0xd,0xc,0xb,0xa,0x9,0x8,0x7,0x6,0x5,0x4,0x3,0x2,0x1,0x0 };
	unsigned int MK[32] = { 0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,0xb,0xc,0xd,0xe,0xf,0xf,0xe,0xd,0xc,0xb,0xa,0x9,0x8,0x7,0x6,0x5,0x4,0x3,0x2,0x1,0x0 };;
	unsigned int K[4][8] = { 0 };
	int hang = 0, lie = 0;
	unsigned int rk[32][8];
	clock_t start = clock();
	//32轮求密钥
	unsigned int KA[8] = { 0 };
	unsigned int KB[4] = { 0 };
	unsigned int KBbin[32] = { 0 };
	unsigned int lb[32] = { 0 };
	unsigned int lbhex[8] = { 0 };
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			K[i][j] = MK[i * 8 + j] ^ FK[i][j];
		}
	}
	for (int i = 0; i < 32; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			KA[j] = K[1][j] ^ K[2][j] ^ K[3][j] ^ CK[i][j];
		}

		//A进S盒
		for (int j = 0; j < 4; j++)//4个s盒
		{
			hang = KA[j * 2];
			lie = KA[j * 2 + 1];
			KB[j] = S[hang][lie];

		}

		//B线性变换
		for (int ii = 0; ii < 4; ii++)
		{
			for (int j = 1; j <= 8; j++)//转换成二进制
			{
				KBbin[8 * (ii + 1) - j] = KB[ii] % 2;
				KB[ii] = KB[ii] / 2;
			}
		}
		for (int j = 0; j < 32; j++)
		{
			lb[j] = KBbin[j] ^ KBbin[(j + 13) % 32] ^ KBbin[(j + 23) % 32];
		}


		//rki=K0^lb
		for (int j = 0; j < 8; j++)
		{
			lbhex[j] = lb[j * 4] * 2 * 2 * 2 + lb[j * 4 + 1] * 2 * 2 + lb[j * 4 + 2] * 2 + lb[j * 4 + 3];
			rk[i][j] = K[0][j] ^ lbhex[j];
		}

		//K0=K1,K1=K2,K2=K3,K3=K4
		for (int j = 0; j < 3; j++)
		{
			for (int k = 0; k < 8; k++)
			{
				K[j][k] = K[j + 1][k];
			}
		}
		for (int j = 0; j < 8; j++)
		{
			K[3][j] = rk[i][j];
		}

	}
	
	for (int time = 0; time < 10000; time++)
	{
		
		int X[4][8] = { 0 };
		unsigned int XA[8] = { 0 };
		unsigned int XB[4] = { 0 };
		unsigned int XBbin[32] = { 0 };
		unsigned int FX[8] = { 0 };
		for (int j = 0; j < 4; j++)
		{
			for (int k = 0; k < 8; k++)
			{
				X[j][k] = plaintext[j * 8 + k];
			}
		}
		for (int i = 0; i < 32; i++)
		{
			for (int j = 0; j < 8; j++)
			{
				XA[j] = X[1][j] ^ X[2][j] ^ X[3][j] ^ rk[i][j];
			}
			//A进S盒
			for (int j = 0; j < 4; j++)//4个s盒
			{
				hang = XA[j * 2];
				lie = XA[j * 2 + 1];
				XB[j] = S[hang][lie];

			}
			//B线性变换
			for (int ii = 0; ii < 4; ii++)
			{
				for (int j = 1; j <= 8; j++)//转换成二进制
				{
					XBbin[8 * (ii + 1) - j] = XB[ii] % 2;
					XB[ii] = XB[ii] / 2;
				}
			}
			for (int j = 0; j < 32; j++)
			{
				lb[j] = XBbin[j] ^ XBbin[(j + 2) % 32] ^ XBbin[(j + 10) % 32] ^ XBbin[(j + 18) % 32] ^ XBbin[(j + 24) % 32];
			}
			//FX=X0^lb
			for (int j = 0; j < 8; j++)
			{
				lbhex[j] = lb[j * 4] * 2 * 2 * 2 + lb[j * 4 + 1] * 2 * 2 + lb[j * 4 + 2] * 2 + lb[j * 4 + 3];
				FX[j] = X[0][j] ^ lbhex[j];
			}
			//X0=X1,X1=X2,X2=X3,X3=X4
			for (int j = 0; j < 3; j++)
			{
				for (int k = 0; k < 8; k++)
				{
					X[j][k] = X[j + 1][k];
				}
			}
			for (int j = 0; j < 8; j++)
			{
				X[3][j] = FX[j];
			}
		}
	}
	clock_t end = clock();
	double timespend = ((double)end - (double)start) / CLOCKS_PER_SEC;
	cout << "未优化10000次加密时间为:" << timespend << endl;
	/*for (int i = 3; i >=0; i--)
	{
		for (int j = 0; j < 8; j++)
		{
			cout << hex << X[i][j];
		}
		cout << endl;
	}*/
	return 0;
}